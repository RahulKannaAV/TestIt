gtwo. Now, since you're here, you've probably heard of Bitcoin
before. Bitcoin was one of the first protocols to use this
revolutionary technology called blockchain. The Bitcoin white
paper was created by the pseudo anonymous Satoshi Nakamoto, and
outlined how Bitcoin can make peer to peer transactions. In a
decentralized network. This network was powered by
cryptography, decent Tality, and allowed people to engage in
censorship resistant finance, in a decentralized manner due to
its features, which we'll talk about in a little bit. People
took to this as a superior digital store of value, a better
store of value over something like gold, for example, and
that's why you'll also hear people commonly refer to it as a
digital gold similar to gold. There's a scarce amount or a set
amount of bitcoin available on the planet, only so much that
you can buy and sell. You can read more about the original
vision in the white A paper we've linked to the white paper
in the GitHub repo associated with this course. Now, this was
an insane breakthrough in a little bit, we're going to learn
exactly how this is all possible and how this actually works
under the hood. Some people though, saw this technology and
wanted to take it a little bit farther, and do even more with
this blockchain technology. And a few years later, a man named
Vitalik Buterin, released a white paper for a new protocol
named Aetherium, which use this same blockchain infrastructure
with an additional feature. And in 2015, him and a number of
other co founders released the project Aetherium, where people
could not only make decentralized transactions, but
decentralized agreements, decentralized organizations, and
all these other ways to interact with each other without a
centralized intermediary or centralized governing force.
Basically, their idea was to take this thing that made
Bitcoin so great, and add decentralized agreements to it,
or smart contracts. And in fact, technically, these smart
contracts weren't even really a new idea. Back in 1994, a man
named Nick Zabo, had actually originally come up with the idea
smart contracts are a set of instructions executed in a
decentralized autonomous way, without the need for a third
party or centralized body to run them. And they come to life on
these blockchains, or these smart contract platforms, like
Aetherium. And it's the smart contracts that are going to be
the core thing that we're going to be working on in this course,
and that we're going to be developing, you can think of
smart contracts in the same way you think of traditional
contracts or traditional agreements. They're just a set
of instructions between parties, except instead of written on pen
and paper or typed up in Microsoft Word, they are written
in code and embodied on these decentralized blockchain
platforms. And that's also where they're executed. Instead of
being executed by the two parties, or three parties, or
however many parties that are involved. This removes this
centralized issue that we'll talk about more in a bit. This
is one of the main differentiators between the
Etherium protocol and the Bitcoin protocol. It's these
smart contracts. Now, technically, bitcoin does have
smart contracts, but they're intentionally Turing incomplete,
which means they don't have all the functionality that a
programming language would give them. This was an intentional
move by Bitcoin developers. Bitcoin developers viewed
Bitcoin as a store of value versus Aetherium, developers
viewed Aetherium as both a store of value and a utility to
facilitate these decentralized agreements. Now, the smart
contracts on blockchains alone are absolutely incredible.
However, they do come with a huge issue. If we want these
digital agreements to replace the agreements in our everyday
lives, they probably are going to need data from the real world
blockchains by themselves actually can't interact with and
can't read or listen to data from the real world. This is
what's known as the Oracle problem. These blockchains are
deterministic systems and they're deterministic on
purpose. And we'll learn about more about how that works in the
sessions to come. So everything that happens with them happens
in their little world. But if they're going to be these
agreements, they need external data and they need external
computation. And this is where Oracle's come into play.
Oracle's are any device that delivers data to these
decentralized blockchain or runs external computation. However,
if we want our applications to stay truly decentralized, we
can't work with a single Oracle or a single data provider or a
single source that's running these external computations. So
we need a decentralized Oracle network. Similar to our
decentralized blockchain network, you're on chain logic
will be decentralized, but you also need your off chain data
and computation be decentralized, combining this on
chain decentralized logic. With this off chain, decentralized
data and decentralized computation gives rise to
something called hybrid smart contracts. And most of the
biggest protocols that we interact with today are some
type of hybrid smart contract or interact with hybrid smart
contracts. To some extent, this is where the protocol chaining
comes into play. It is a modular, decentralized Oracle
network that can both bring external data and external
computation into our smart contracts to make sure they're
decentralized end to end, while giving them the feature richness
that we need for our agreements. chainlink allows for us to get
data to upkeeps, get random numbers or really customize our
smart contracts in any meaningful way. Now, throughout
the course, we're going to use the terminology smart contract.
However, whenever we say smart contract, we're often using it a
little interchangeably with hybrid smart contracts, but just
know that when we say hybrid smart contract, we're talking
specifically about smart contracts that have some type of
off chain component. Now since the theorems release, a number
of different block chains or smart contract platforms have
come to light such as avalanche polygon, Phantom harmony, and
more. For the majority of this course, we're going to be
assuming that we're going to be deploying to the Ethereum
network. However, everything that we learned here is going to
be applicable to the vast majority of the blockchains out
there like polygon, avalanche, Phantom harmony, etc, and
understanding everything from a theory and funding mentals will
give you the skills that you need to switch chains very
easily with literally one line of code. So don't worry about
learning a specific tool or with a specific chain because most of
them work together seamlessly. Now, there are a couple of smart
contract platforms that don't use solidity. But still learning
the fundamentals here will make you much better at those as
well. And the Etherium by far has the most value locked and is
the most used blockchain and smart contract platform out
there. You'll also hear those two terms used a little bit
interchangeably as well. Sometimes they'll say smart
contract platform, sometimes they'll say blockchain, they
kind of mean the same thing. Obviously, blockchains could
mean store of value and smart contract platform, but you get
the idea. Similarly, chainlink is the most popular and powerful
decentralized Oracle network is the one that we're going to be
focusing on for this course as well. chainlink is also
blockchain agnostic. So to work on Aetherium, avalanche, Polygon
Solana Terra, or really any other blockchain out there. Now,
throughout this course, you'll hear the term DAP or
decentralized Protocol, or smart contract Protocol, or
decentralized application. And they all kind of mean the same
thing. A decentralized application is usually the
combination of many smart contracts. And when we get into
solidity, you'll see what a singular smart contract really
looks like. And like I said, learning all these core
fundamentals will make you a better solidity and a better
smart contract developer, you'll also hear the term web three a
lot in this video. And in the industry, web three is the idea
that blockchain and smart contracts are the next iteration
of the web web one being this permissionless open source world
with static content, web two being the permissioned web with
dynamic content, but all the agreements and logic runs off of
centralized servers where they control your information. And
then web three comes back to the permissionless web. But once
again, with dynamic content, and instead of centralized servers,
running your logic, decentralized networks, run the
logic creating these censorship resistant agreements, that the
smart contracts enable is also generally accompanied by the
idea that the users own the protocols that they work with,
and it's an ownership economy. You'll see what I mean later in
this course. And we've talked a lot about the history and about
the high level of these protocols and of the smart
contracts and what they can do. But what do these smart
contracts really mean? What is it when I say trust, minimize
agreements or unbreakable promises? What is the real value
add of these smart contracts? Before we look under the hood,
take a peek at how this all works. From a technical
standpoint. Let's learn what all the value of this is. What is
the purpose of us building all these technologies? Have you
taken this course? What problem does this technology solve? In
my mind, a technology is really only as good as the problem that
it solves. If it doesn't solve a problem, then why bother Mark
contracts, Blockchain web three cryptocurrencies, those are all
just different words that encapsulate the idea of what
we're doing in such a unique paradigm. I think the easiest
way to sum up what these smart contracts do is that they create
trust minimized agreements. And if you might be scratching your
head to that. A much easier way to think about it is just that
give rise to unbreakable promises. Yes, you heard that
right. Unbreakable agreements and promises. Additionally, they
give rise to speed, efficiency and transparency, and a number
of other things. I made a video pretty recently about exactly
this. So let's dive in and take a listen to the purpose the
undeniable value of smart contracts
cryptocurrencies, fundamentally re landscape markets and
agreements as we know them. Unfortunately, you've probably
only been bombarded with people screaming about empties and
money. Now, some of the memes are fun, but let's forget the
bullet and get down to the essence of the space. If you're
already in web three. This is the video to send to your
friends to explain why you're so excited about this space and
explain why we're here. And then if you're not into crypto,
you've come to the right place. And yes, there are fun memes and
markets and there's some money stuff in there all these things.
But outside of all that the purpose of blockchains relates
to the age old elementary school unbreakable, promise the pinky
swear, let's get Froggy. Nearly everything you do in life is the
result of an agreement or a contract. Your chair was the
result of an agreement to buy and sell lumber to assemble and
sell the chair to a real tailor on Amazon. Then you made an
agreement to buy the chair for $40. The lights in your house
are powered by electricity, which is an agreement from you
and the electric company you agree to pay them in return
they'll keep the lights on the electricity they generate it's
agreements between them and engineers who built turbines to
generate the electricity with insurance you agree to pay some
amount of money to them every month, and in return, they will
do nothing or I mean, they'll cover your medical bills, almost
everything you do and everything you interact with is the result
of some form of agreement or contract in some aspect. Now,
agreements and contracts can feel kind of abstract and boring
to really grasp on to simplify, we can also refer to them as
promises. When you get an oil change. They're promising that
they will faithfully change your oil In exchange for money, when
you put money in the bank, they promise to keep it safe in
exchange for them to use your money to give out loans. When
you buy a lottery ticket, the lottery promises to give you a
fair chance at winning a ton of money in exchange for you buying
the ticket. Whenever you make one of these agreements. In a
way, you're asking them to pinky swear to not screw you over and
to treat you fairly. But this doesn't always happen. Let's
look at a real world example of someone breaking the Pinkie
swear back in the 80s and 90s, McDonald's ran a promotion for
people to win money by collecting McDonald's Monopoly
game cards. The idea was simple. You buy McDonald's in return,
you get a chance to win $1 million. You can imagine
McDonald's literally going Hey, everybody, I promise you if you
buy our MC food and McNuggets, we'll give you a fair chance of
winning this money, we ended up breaking this promise, instead
of having a fair chance of winning your chance was in fact,
zero in the mid 90s. Between 13 and $24 million went into the
pockets of not people playing the game, honestly. But a group
of corrupt insiders who had rigged the game, meaning that
when you played the McDonald's Monopoly game, you were buying
into a set of lies and promises that were 100% always going to
be broken. And the thing is, it doesn't really matter if this
was McDonald's fault or not. They were the ones making the
promises that they ultimately could not keep. Another way you
could think about it is that that's $24 million that they
essentially stole from you and I now if this system was deployed
on a blockchain was something called a smart contract, it
would have been impossible to defraud this $24 million due to
smart contracts being immutable, decentralized and transparent.
But I'll get back to that in a minute. In all the agreements
and contracts we make, imagine making a pinky swear with a 10
year old and imagining how that agreement would hold up. Hey,
buddy, Could you could you please keep my money safe? You
can play with it if you like, but just please have it when I
come back. Immediately. You might get that worrying feeling
in your chest, something might go wrong. This 10 year old might
lose your money. You might be thinking, how could I trust
them? Will they break their promise and this feeling of I
can't breathe because of untrustworthy situations
happens? Once all the time. Can I trust this used car
salesperson to give me a good car? Can I trust this tag that
says machine washable? Or will it make my shirt shrink? Will my
insurance provider break their promise of covering my medical
bills want to get hit by a bus? I'm Patrick promises he'll go on
a hike with me. Well, he actually I actually will. But
the issue with our current agreements and contracts is we
have to trust the people. We're making them to do the right
thing. However often they're actually incentivized to not do
the right thing. insurance doesn't want to pay out money.
Sometimes salespeople just want to get the shit off the shelves
and with my girlfriend, I promised to go on a hike. But I
need hikes. Where else is has happened. Now you might be
thinking okay, Patrick, this seems cool. But like Where has
this actually affected me? Well, the McDonald's lottery that we
just spoke about above during the Great Depression with the
run of the banks banks promised to keep our money safe and that
when we went back to go get it they would actually have the
money there. And well and behold there were times that they
didn't have the money they're just last year Robin Hood
painted this amazing picture. On user application we will give
you access to the markets we promise we will give you a
retail investor a fair chance of interacting with the world the
finance side, but not this asset. This
asset, this asset or this asset, the 2008 financial crisis
remember that shady deals behind closed doors combined with lies
about financial product brought the world to its economic knees,
how are you? hyperinflation in Zimbabwe hyperinflation in
Brazil, fair enough. US history is a relentless lesson of
trustworthy entities being notorious promised breakers and
we finally have a way to fix it with smart contracts. Now,
before I jump into smart contracts, a lot of people might
be thinking, hey, cool in all, however, we have systems in
place to protect against a lot of these things, which is true,
and which is great. And that is a very helpful step forward. But
these systems often breaks ones in 2008 Definitely didn't work.
The ones with the Robin Hood crisis definitely didn't work.
And even if these systems apply, and you go to court to try to
work them out, maybe you're in court for years before you
actually see a resolution and by that time, what you needed the
money for is longer. So what is this technology? What is this
tool that can fix this fundamental problem in our
agreements today, this tool is smart contracts and this tool is
what the blockchain was built for. Now, I'm gonna give you a
quick overview of what a smart contract is. However, I'm
leaving some links in the description for more in depth
explanations, but the basics of them is a smart contract is an
agreement contract or a set of instructions deployed on a
decentralized blockchain. And once the contract or set of
instructions is deployed, it cannot be altered, it
automatically executes and everyone can see the terms of
the agreement. Real basics of it is that the code is executed by
decentralized collective like a group of people but a group of
people running a certain software. This means that no one
person or entity can actually alter any of these agreements or
change the terms of the arrangement in these traditional
agreements. Whoever owns the contract, whoever owns the
execution of the contract can flip a switch and say, We're not
going to do that anymore. In smart contracts and web three in
blockchain, you no longer can do that. Typically, these smart
contracts are on a decentralized blockchain, and used in
combination with a decentralized Oracle network to get the real
world assets and information. And if these words sound like
I'm conjuring up a magic spell, well, again, check the links in
the description. If you want to learn more about the technical
implications. If you're not a technical person, then you're
not interested in getting into the nitty gritty, you can kind
of think of it like HTTPS, I bet the vast majority of you don't
even know what HTTPS stands for. And yet you use it every single
day whenever you log on to the internet. So how does this fix
the McDonald's Monopoly issue? In its traditional form, the
lottery was executed behind closed doors, somebody operated
and owned the code and the contracts and the agreements
that ran the lottery, and they had the power to alter it. And
nobody other than the people internal on the lottery could
audit this altering happening. Now if the code for this lottery
was deployed onto a blockchain, every time a hacker attempted to
alter it, everyone would be notified. Not only that, but you
couldn't even alter it, because the terms of a smart contract
cannot be altered. Once deployed, combine that smart
contract with a chain link VRF Oracle to get a verifiably
random number. And presto, you now have a perfectly
decentralized, unalterable agreement that is impossible to
hack commit fraud or manipulate we have just saved the public
between 13,000,020 $4 million just by fixing the issue of
trust. How does this fix Robin Hood? Well, the problem with
Robin Hood is already fixed. Right? Again, the problem is
that there's a centralized body that can flip a switch at any
time and say you can't access these markets anymore. We're
breaking our promise of actually giving you access to the
markets. This is already fixed with something called
decentralized exchanges. And these exist today, one of these
exchanges is one called uniswap. You can swap ERC 20 tokens,
which are kind of the equivalent of stocks, but some are some
are, it's a little confusing. I won't get into that here either.
But it doesn't have that centralized body that can flip a
switch and ruin access to the markets. And had these investors
been on a decentralized exchange, it would have saved
them hundreds of millions of dollars, and it would have
prevented fraudulent market manipulation. How does it fix
run of the banks with transparency built in an
automated solvency checks, you can build a bank like smart
contract that has insolvency checks built in that make it
impossible to get there and solve it means brokers any
agreement or any history lesson, where there was a trust
assumption that was broken, smart contracts can be applied
to and should be applied to, especially in a time where big
money runs, owns and controls everything, we desperately need
to move to a world where some self interested centralized
entity can't flip a switch and ruin people's access to the
services that they need. We can move away from a world that is
brand based to a world that is math based. Right now, if you
interact with a service that you don't like, or that they break
their promise, the only thing you can do is walk down the
street to the next service that's going to make the same
set of promises. And you have to hope and pray that they're
actually going to keep it we can move from that to a world where
we can just look at the map and say, oh, okay, one plus one
equals two. This is what this agreement is going to do for me
every single time guaranteed, because it's a decentralized
autonomous agent has no incentive to be evil, and
everything is transparent and out in the open of a big
company. And if it was better for me for one plus one to equal
three, maybe I would go behind some closed doors and flood some
numbers and come back and be like, hey, one plus one equals
three with smart contracts. That's impossible. Doing the
right thing is infrastructural now, given the choice between
two agreements, one where you have to trust a single
centralized entity that they're going to do the right thing for
you, versus a decentralized untampered double collective, which one you're gonna choose.
I'm picking the one that can't screw me over every single time.
For every agreement I can apply it to now this technology is
relatively new, but we have already seen it relandscaping
entire markets and continue to do so the traditional financial
world is already getting its lunch eaten by defy or
decentralized finance. There's already over $200 billion of
people's money in these protocols to help have a more
fair, more accountable, more transparent financial system.
This defy movement is one of the main reasons I got into this
space because we desperately need to move away from where we
are right now. And and people's chances for wealth being sucked
up by some group that's bending the rules in their favor and
smart contracts are our ticket to that better world. More and
more industries are also coming over to smart contracts and
blockchain because of all the innovations and because of all
the advantages that it has as we grow and as we get better as we
get closer to this vision of having this concept fulfilled,
trust minimized agreements. These smart contracts are
minimizing the trust that we need to give other people in
order for these agreements to be executed. If trust minimized
agreements is too confusing for you just say unbreakable
promises. Now I gotta be honest with you guys. blockchains and
smart contracts and cryptocurrencies can actually do
more than just trust, minimize agreements. They have security
benefits, uptime benefits, execution, speed benefits, and a
whole lot more. But it's a lot easier to just learn about one
and learn the other ones later, right. It's kind of like
sprinkles on top. So this is why we are here. This is why we're
building this future and this is why we are so excited about it. Even in just this introduction
part, we've learned a ton. So let's do a quick summary of what
we've learned so far. Bitcoin was the first protocol to take
this blockchain technology into the limelight and take these
cryptocurrencies into the mainstream Bitcoin is a sort of
digital gold or a store of value able to make transactions
between users in a decentralized manner. Aetherium and other
smart contract platforms take this blockchain technology one
step further, enabling people to make smart contracts and
decentralized trust minimized agreements, the smart contracts
and decentralized applications can access and interact with the
real world using something called decentralized Oracle
networks. chain link is a decentralized network that
allows us to build these hybrid smart contracts, which combines
our on chain logic with our off chain, decentralized data, and
decentralized computation, giving rise to our logic being
completely decentralized, and our data and external
computation being completely decentralized, giving us all the
features that traditional agreements and traditional
contracts have. Now these digital currencies like
Aetherium, and Bitcoin have value. Even without the smart
contract part, having a censorship resistant,
decentralized store of value is naturally powerful in its own
right, we have some links in the GitHub repository that will
teach you how this decentralized store of value flips traditional
finance on its head. And it's another one of the great reasons
for building smart contracts. But again, the easiest way to
boil it down is trust minimized agreements, or unbreakable
promises. But let's also go into some of these other features
that smart contracts have over our traditional environment. The
first feature, of course, is that they are decentralized. And
they have no centralized intermediary, the different
individuals that run one of these blockchains are known as
node operators. And it's the combination of all these 1000s
of node operators running the same software running these
algorithms running these smart contracts that make the network
decentralized. We'll dive deeper into how that works later. The
next feature is transparency and flexibility in these
decentralized networks. Since all these individual node
operators run the software, everybody can see everything
that's happening on chain, meaning there's no shady deals,
there's no weird things happening. Anything that's going
to be unfair, people will be able to see and just not use,
everybody has perfect information and has to play by
the same rules. Now additionally, this doesn't mean
that there's no privacy, the blockchain is pseudo anonymous,
meaning that you aren't necessarily tied to an identity
in real life, they also have the feature of speed and efficiency.
For those of you who have ever tried to do a bank transfer or
send money across seas, you know, it sometimes can take two
to three weeks, when in fact, all these banks are really doing
is basic math. They're subtracting money from your
balance and adding it to some other balance. Why does it take
so long, in the blockchain, all of these transactions happen
instantly. Another instance for those in the financial world
today know that clearing houses and settlement days can take a
long time. In the blockchain, there's no need for any of that,
because they happen instantly. This obviously is much quicker,
but it also makes for much more efficient interactions with each
other security and immutability. Again, immutable means that it
can't be changed. Once a smart contract is deployed, that's it,
whatever is in the code is going to be in the code forever, they
cannot be altered or tampered with in any way. This means that
the security is much easier. Whereas in a centralized world,
somebody can hack into the server, jump into the database
and change some numbers. You can't do that in the blockchain
world. And since it's decentralized, in order to hack
the blockchain, you'd have to take over half of the nodes as
opposed to in the centralized world, where you only have to
take over one in the regular world. If your computer and your
backup computer go down, all of your data is gone. In the
blockchain world, if your computer and your backup
computer go down, all your data is safe, because it's being run
on all these other decentralized nodes. And even if a few 100
nodes or a few 1000 nodes go down. It doesn't matter because
as long as one node has a copy of the blockchain, you're good
to go hacking a blockchain is nearly impossible, and leaps and
bounds more difficult than hacking a centralized server.
Not only that, but this is safer in the asset sense as well. All
you need to access your credentials and your information
in your assets is your private key. Which is basically your
password for all of this. And as we've discussed in the video,
the smart contracts remove this counterparty risk, remove this
centralized intermediary, remove these trust gateways that we
have to do in web two. When we engage with users and
individuals, they don't always have our best interests at heart
smart contracts, remove this counterparty risk, because once
one of these contracts is created, they can't go in and
they can't alter it. And they can't let greed or ego or
anything else, get the better of them and alter the terms of the
deal. And as we said, this gives rise to these trust minimized
agreements or these programmatic unbreakable promises. We move
away from brand based agreements to math based agreements, where
we can look at the cryptography we can look right at the code
and see exactly what something is going to do and how it's
going to execute, versus having to rely on a human being doing
the right thing with smart contracts and decentralized
hybrid smart contracts. Doing the right thing is
infrastructural all these pieces boil down to us having the
freedom to interact the way we want to interact without having
to be afraid that interacting like that is going to screw us
over this trust minimized piece, these unbreakable promises, make
interactions so much better. In a purely web two world, we're
constantly bombarded with messages of projects and
protocols pushing us to move or act in the direction that makes
them more profitable. Versus in the smart contract space, we can see everything
transparently. And we can even engage in interact and be
partially owners of the protocols and the interactions
that we decide that we want to be a part of. So smart contracts have been around for a few years now.
And what did they generate for what industries have come about
due to these smart contract platforms being around? Well,
you've probably heard of some of these and some of these we've
already mentioned, but let's give you a quick refresher, d
phi d phi stands for decentralized finance. And it
gives users the ability to engage with finance and markets
without having to go through a centralized intermediary. For
example, like we said, with Robin Hood, you no longer have
to trust that Robin Hood would continue to give you access to
the markets, you instead would be able to see in the smart
contract. Yes, I have access to the markets or in the 2008
financial crisis. You never have to trust that these groups and
institutions are giving you the correct things on the back end.
You can see everything transparently right on the
blockchain, you can engage with things like money markets and
sophisticated financial products easy effectively and securely at
the time of recording. defi has around $200 billion in assets
under management and is quickly growing. If you're really
excited about defy we have a ton of defy examples showing you how
to build and interact with these protocols. In coming lessons.
Dows or decentralized. autonomous organizations are
another group that we've already mentioned. Dows are groups that
are governed completely decentralized by a set of
instructions or smart contracts on chain. There are some massive
benefits here where engagement is much easier. The rules are
black and white. And you can see everything directly on chain
voting and governance technologies completely
decentralized in the blockchain space is one of the big ones
pushing how we can evolve politics and how we can evolve
governance to make it more efficient, fair and reasonable.
And you better know it, we have some examples of how to build
Dows and how to work with Dows incoming lessons. So be sure to
watch those NF T's Stanford non fungible tokens and can really
be kind of described as digital art or just a unique asset, they
can do so much more, but we'll keep it high level for now.
Projects like board apes and crypto punks have revolutionized
the way that people get paid for their work, show off their
creativity, status, and so much more. And yes, of course, we
have lessons showing you how to create and interact with NF T's
as well, so many other groups and so many other industries are
being created as a result of this insane technology. And
maybe after finishing the journey with us here, you go out
and you'd be the one to pioneer the next industry or the next
billion dollar idea you've learned so much already. But now
that we've learned a lot of this high level information, let's
finally jump in, and let's make your first transaction and let's
get you set up to interact with this new world. In this next
section, we're going to get you a wallet and we're going to show
you exactly what a transaction looks like and feels like. Let's
dive in. This is the Aetherium website aetherium.org We are
going to make a transaction on a test Aetherium blockchain I'll
explain what that means in a little bit. This is going to be
our first transaction that's made on the blockchain. Now
again, this process that we're going to follow is going to work
the exact same with polygon, avalanche Phantom and all these
other EVM compatible blockchains. I'll explain what
that means in a bit too. For now, just follow along and have
fun in order to make a transaction on any of these
blockchains. The first thing that we need to do is we need to
set up a wallet. So I'm gonna go ahead and go to meta mask
because it's one of the most popular wallets and one of the
easiest to Use, we're going to go ahead and download it. I'm
using the brave browser, but it works for Chrome, Firefox or
really any other browsers. And it's just going to be a little
extension in the top right hand of your browser. This way, we
can really easily see it any times what we have in our
wallet, will still are all of our Aetherium based currencies.
So I'm gonna go ahead and install meta mask for brave, add to brave, add extension. And
now we can go ahead and get started with working with Brave,
this is the first step you absolutely need to take when
starting your journey and one of the easiest steps to take. So
we're gonna go ahead and get started. And we're going to
create a brand new wallet. So we're gonna go ahead and hit
create wallet. If you already have a wallet, you can actually
import it via I have a seed phrase, and we'll talk about the
seed phrase or secret phrase in a little bit. So let's go ahead
and create a new wallet. And sure, we'll agree to help out
Metamask now we will create our password make sure that this is
really secure. For the purpose of this demo, my passwords are
just gonna be password. But please don't have that be your
password. You may also get a video like this teaching you
about your secret recovery phrase. This is the same thing
as your pneumonic. But see your recovery phrase is a lot more
clear as to what it is. And again, to give us a ton of
different tips on how to actually store it and keep it
safe. The main takeaway from this is never shared this
absolutely never shared this. So we're going to go ahead and
click reveal secret words. I'm showing you guys here because
this is just a demo and I don't really care. However, if you
show this secret phrase to anybody else, they will have
access to all the funds in your application. So everything that
we're going to do in this tutorial, we're going to use
fake money, we're going to use not real money, so it doesn't
matter. Now for the purposes of testing and developing, I always
recommend using a completely separate meta mask, a completely
separate Wallet. So for going throughout this entire course,
if you already have a wallet, or if you already have a meta mask,
please just set up a new one, create a new profile, create a
new meta mask, and this will be your wallet that you use for the
duration of this course. However, if you're going to
actually put money in here, you absolutely need to have this
written down. Because if you lose access to this, and all
your private keys, which we'll talk about in a little bit, you
will lose access to your wallet, and you will lose access to all
your funds. So they give some tips like store this phrase and
a password manager like one password, write this phrase down
on a piece of paper, put it in a secure location, memorize it,
whatever you want to do, just make sure you have this backed
up somewhere, I'm just gonna go ahead and hit download this for
now, it's not best practice to save to your computer, it is
much better to use a password manager or write it down on a
piece of paper or something. So we're gonna go ahead and hit
next. And it's going to ask us to verify that we actually have
it written down. And we're gonna go ahead and hit confirm, and
great and gives us a couple other tips. Remember, definitely
take these tips very seriously, especially if you're gonna use
this for real money. Like I said, For this demo, we're just
going to use test money. So it's not as big of a deal. But if you
put real money in, you absolutely need to backup this
seed phrase or secret phrase or we're going to refer to it as
our pneumonic phrase. Awesome. Now we can see the interface of
our wallet here full screen. And depending on your browser, you
can actually come up and pin it to your browser so that you can
just click it up in the top right, and it'll drop down and
you can see the same interface here our pneumonic phrase that
secret phrase, those that secret 12 words that they gave us have
given us access to a new account, the address of our
account is located right here. In fact, if we click it and copy
it to our clipboard, and go to a tool called a block explorer
called ether scan, we can actually paste our address in
here and see details about our account. Ether scan, like I
said, is what's known as a block Explorer. And it's a way to view
different addresses transactions and other happenings that happen
with a blockchain. If we look at this address that we just
created on ether scan for Etherium main net, we can see no
transactions have happened. There's really no analytics,
there's no comments, there's no balance, there's no value,
because it's a brand new wallet, and this address that we just
punched into ether scan represents our unique address
our unique wallet only identifiable for us. We'll talk
about ether scan a little bit more in a bit because it's a
tool that we're going to use quite often in wallets like meta
mask, you can actually even click right here and create even
more accounts. So let's go ahead and create a new account. We'll
call this account two. As you can see, this one has a
different address. So if we click this one, we go back to
ether scan. We paste the address in here. We hit Enter. We can
see another address again that's uniquely identifiable to us,
right here. It is zero balance, no value, no transactions now If
we go back to our Metamask, and we click the little button, we
can see we have two different accounts in here, it's the same.
If we hit the extension in the top right, click the button, we
have two different accounts. The 12 word secret recovery phrase
allows us to create multiple accounts, all with the same
secret recovery phrase. So that secret recovery phrase will give
us access to both account one and account two and any other
accounts that we create by hitting this Create Account
button, because it gives you access to all the accounts in
your meta mask. Now, these addresses of both of our
accounts are the public unique identifiers, but they also have
a private unique identifier only identifiable to us. Similar to
the pneumonic, these are private identifiers we never want to
share and we never want to give out their private This is known
as your accounts private key. So the mnemonic will give you
access over many of these accounts, the private key will
give you access to just one of these accounts, we can see it by
hitting these little three dots, going to account details and
export private key, you'll just have to punch in your password
here. And you'll be able to see your private key. This is going
to be your private key for your account, you can think of your
private key as a password for your account that lets you
create transactions. Now the reason that I'm showing mine on
screen is because I'm not going to put any real money in here.
And this is just going to be a burner account for this
tutorial. And I highly recommend once again, you use a burner
account, you use accounts that you never put any real money
into. And along the way, I'll show you how to make sure that
you don't do that. But normally, it's not a good idea to show or
share your private keys or your secret recovery phrase, if
somebody gets a hold of this private key, they will have
access to my account one. However, they won't have access
to my account to if they get a hold of my 12 word recovery
phrase or pneumonic they'll have access to both accounts. And
this is why when people say keep your private keys safe, your
keys, your Bitcoin, your keys, your Aetherium, they're talking
about both your mnemonics or your secret recovery phrases.
And your private keys keep those private, your public addresses
are totally public. And anybody can view your accounts on
something like ether scan, or any other explore. And it's
totally okay for people to share their public addresses. If you
lose your private key, you lose access to one of your accounts.
If you lose your mnemonic, you could potentially lose access to
all your accounts. Basically, what I'm trying to say is back
these up and keep them in safe places for this course it's okay
if you lose one, since we're not putting any real money in them.
But in the real world, be sure to do this. And great. Those are
some of the main security considerations here. Now, if you
look up in the top right, right next to that account button that
we've been clicking, you also see this thing saying Etherium
main net, this is our networks tab. And if we click it, we can
see a list of all the different networks that we currently have
access to a Etherium main net is the main network of Aetherium.
And this is where real money is spent and used for transactions.
For this course, we're not going to be working with the Etherium
main net, we're instead going to be working with something called
a test net. Since we're engineers, oftentimes, we're
going to want to test and see what our code is actually going
to do and how to interact with it. We're going to use a
combination of local networks and test networks to actually do
this to actually test our smart contracts. We're mainly going to
use local networks. But we'll get to that in a little bit to
see some of the test networks that come default with meta
mask, we hit show slash hide test networks, this will bring
us into the settings page. And we just hit select this to show
test networks in the list. And we just hit on Now if we scroll
back up, we'll close out of the settings, we hit the network's
tab again. Now we can see all of these other networks here like
ropsten, Koven, Rinkeby, and Garelli. These test networks or
networks that resemble Aetherium, or polygon, or
Avalanche or phantom or any of these other blockchains. And we
can actually switch our accounts to one of these other test
networks. Let's click rink B, for example, we can see that on
the Rinkeby test network. We also have zero Aetherium we have
no money or nothing in here, we have a blank Rinkeby wallet.
These test nets work nearly identical to how Aetherium main
networks except for they run with not real money. They run
with fake money as a way for us to learn and interact and see
how these different smart contracts actually work together
at the time of filming. rink B is one of the most popular test
networks along with COVID. So we're going to work a lot with
Rigby In this tutorial, however, be absolutely sure to check our
GitHub repository to make sure that you're always up to date
with the best test network for following along with the
tutorial here since their test networks people are running them
out of the goodness of their hearts. And sometimes the best
ones actually change so, so be sure to follow along with the
GitHub repository. We might also use COVID From time to time or
maybe even Grilli. So we're going to show you how to use a
couple of these different test nets. In fact, if we go to the
GitHub repo associated with this course, we can see recommended
test net is indeed currently ranking. So that's what we're
going to work with should this change, you should be able to
follow along with another test. And we'll leave notes as to how
to continue. Now what we can do actually is we can go to Rigby
ether scan, we can go to, you can look up Rinku ether
scan, and it looks like it's the first thing that shows up
Rinkeby dot ether scan.io, we can punch in this same address,
copy and paste it. And we can see some of the details of this
address on the Rinkeby ether scan. Like I said, right now,
it's totally blank. This networks interface later on is
also how we're going to be able to work with polygon, avalanche,
etc, we'll just have to add networks. But we'll get to that
in a bit. And just to reiterate, test nets are free and for
testing our smart contracts and main net networks cost money and
are considered live. Now I also do want to put a caveat here
that we do want to keep in mind that these test nets are being
run at the goodness of people's hearts. So we don't want to
abuse them, we want to use them to learn and then move on. So
try not to send a billion transactions on one of these
test nets. In fact, what we're going to do right now is we're
going to send a transaction on the Rinkeby test net. And this
will show us exactly what it would look like on a main
network. In order for us to simulate one of these
transactions, we're going to go to what's called a faucet. And
if you go to the GitHub repository associated with this
course, right underneath the recommended test net is going to
be a test net faucets, which is going to show us where the most
up to date faucet location is for us getting test net
Aetherium. So here we are at faucets dot chain dot link,
which again is the recommended faucet, and what we can do is we
can actually put our wallet address in and get some test net
link or test net Aetherium. Now what we are gonna have to do is
we are gonna have to connect our wallet to the Rinkeby network.
So we're going to come down, we're going to switch from COVID
to Etherium. Rigby, and then we're going to make sure our
meta mask is on the Rinkeby test network here. Once both of those
are set up, we're gonna go ahead and hit Connect wallet. And
we're going to choose meta mask. Once we do that, our meta mask
is actually going to pop up and say would you like to connect to
this website, connecting to a website is how we give these
websites in interface to interact with our wallets and
interact with our meta masks. Don't worry, we're not sending
any transactions like this, we'll get to that in a bit. So
we just we can pick an account we want to connect. Let's choose
our account one, we'll hit Next. And then we'll go ahead and
connect. Now that we're connected, we can actually see
our account connected up here. And that little warning is now
gone. And our wallet address is automatically placed into here,
we're going to make our first test transaction. And for now,
we don't need test link. So we're going to leave that off.
But later on, we're going to come back and get that test
link. For now we're just going to need 0.1 test Aetherium. So let's go ahead and complete
the security by choosing the traffic lights. And we're going
to hit Send Request. What this is going to do is we're asking
this faucet to send us 0.1 test Aetherium test net faucets are
ways for us to get money into our wallets on a test net. And
this is why this test and Aetherium isn't worth any actual
money. Since we can get it for free. These don't exist on Main
net, you can't get real Aetherium or real money for free
on a main network. So we're on Rinkeby we're getting fake
Rinckey Aetherium. And we're gonna go ahead and hit send
request. Once we hit Send Request, this transaction hash
is going to pop up here, and it says transactions have been
initiated waiting for confirmation. This means that
some other wallet is actually going to send us 0.1 test eath.
And this is the transaction that it's doing to do that now we
just have to wait for our transaction to finish verifying
and finish going through. Now if this doesn't work right away, I
would recommend Wait a minute and then just try it again. But
what we can do is we can click this transaction hash. If that
transaction doesn't show up, we can also just close this. And we
can copy our address here. And actually we already see 0.1 eath
in our wallets here. But we can go back over to Rinkeby ether
scan, paste our address and and we can see that we now have 0.1
ether as a balance. We can also see that we have a transaction
with all this information going into our wallet. That's what
this green is for. If you click that transaction link, you'd get
something like this, but If you didn't, don't worry, because on
the ether scan, if you click the transaction hash in the
transaction list, you can also see all the details like that.
So now in our meta mask, we have 0.1 eath. Again, this is fake
Aetherium. And we have a transaction associated with our
wallet now, which is awesome. Again, though, if we switch
networks, if we switch networks back to Etherium main net, you
can see that we have nothing on a theory main net. Or if we go
to ropsten, we also have nothing, we only have this 0.1
eath. On the Rinkeby test network, if you want to practice
working with another test net, and the faucet that we're using,
has multiple test nets. Let's go ahead and try it during this
section right now is completely optional, you can watch or you
can follow along. But for example, I can see in my wallet
that we already have COVID supported, so maybe I'll switch
to COVID. Maybe we'll switch to COVID. In the drop down here,
we'll remove test 10 Link, because we only need test eath.
We'll hit I'm not a robot, and we'll send request and the same
things will pop up this time, this is going to be for the
COVID test net. And once our transaction finishes going
through. Now, same thing on COVID. Here, like what we did
with rink B, once our transaction finishes going
through, we'll see 0.1 test eath on the COVID network, if you
want to go ahead and try working with another one of the test
nets. Like maybe, for example COVID recommend you go ahead and
giving it a try. But it's completely optional. And I would
always refer back to the GitHub repo to make sure you're working
with the most up to date faucet and test net. And if we look
back at ether scan, we can actually see more details on
what actually just took place. What actually just happened, how
did our Metamask get a balance of 0.1 eath. All of a sudden?
Well, if we looked down in the transaction section, we can see
that there's a transaction here, some address sent us 0.1 ether.
And if we click the transaction hash, we can see more details
about what actually went down with this transaction. Now
understanding what's going on in this transaction is essential to
learning and being a smart contract developer or just
engaging with the ecosystem. So let's learn the first bit at the
top is this transaction hash. This is a unique identifier for
this blockchain or this test net that identifies this exact
transaction. This transaction hash identifies sending 0.1 eath
to our address, we can see that the status of this transaction
was successful, it didn't break. In any case, we can see the
block number that this transaction was included in and
we'll get to blocks in a little bit, we can see the timestamp
which of course is when this transaction occurred, we can see
which account it was from which if we go ahead and open in a new
tab, we can see that this is the account that this transaction
came from. And it's got 3 million ether. Of course, this
is fake Rinckey ether. So it doesn't really matter, we can
all see who it was to, which again, is just us. This is our
wallet address 0x 106 X blah, blah, blah, cero x 1066, blah,
blah, blah, right, the value of this transaction, of course, is
0.1 ether. Now what's all this that we see as the value so
obviously, the value is 0.1, because that's a mode which we
sent. But we see this transaction fee. In this gas
price, we hover over the tooltip, we can see if you zoom
in on your ether scan, you see amount paid to the miner for
processing the transaction. And we see a gas price which is cost
per unit of gas specified for the transaction and ether and
gray. The higher the gas price, the higher the chance of getting
included in the block. Now if we scroll down even more, and we
click See more, we can also see a ton of other information here.
For now we're just going to click to see less and just focus
on these two. I'll explain all of these in a later session. Let's talk about just the concept of transaction fees
and gas for a second. Remember how I said the blockchain is run
by all these different nodes will all those different nodes
are running this blockchain because they actually get paid
for all the transactions that happen on these blockchains
whenever you make a transaction, there's a node or a miner or or
a validator somebody running the blockchain software is gonna get
paid a tiny bit of Aetherium or polygon or whatever blockchain
that you're running on, they're gonna get paid a tiny bit of
that native blockchain currency. This payment is obviously to
incentivize people to continue to run nodes and they calculate
how much you pay and how much the node operators get paid
based off of how much gas you use. So there's this concept of
gas. Gas is a unit of computational measure. The more
computation a transaction uses, the more gas you'd have to pay
for. For example, we do hit click More just really quickly.
We can see this section say A gas limit and gas usage by
transaction, there was a limit of 60,000 units of gas on this
transaction, and 21,000 or actually use. So this
transaction use 21 units of gas. Now for very simple things like
sending ether, the units of gas are usually pretty cheap. But
maybe for more complex things like like minting NFT,
depositing to some defy contract, etc, maybe those will
cost more gas because they'll be more computationally expensive.
And this is a little confusing right now, don't worry too much
about it. But just know that we use 21,000 gas here. And if we
pull out the calculator 21,000 gas times this gas price right
here, times the gas price, we get the exact same as we see for
the transaction fee. So gas price, times how much gas you
used, is the transaction fee. So whoever sent us this 0.1 ether,
also paid 0.0000525, etc Rinkeby ether to make this transaction.
Now, each blockchain has a different way of actually
calculating how this gas stuff works. So that's basically going
to be the high level of it. So we're going to focus just here
for now there's a total transaction fee. And then
there's obviously the gas price. After we cover how blockchain
works, I'll explain what this burn stuff is these gas fees and
all these other stuff. For now, just know that anytime you make
a transaction on chain, you have to pay a little bit of what I
call transaction gas. So for example, if we go to our
Metamask, we have two accounts right here, we have account one
was 0.1, Rinckey eath, and account two was zero. Rigby. If
I were to send 0.05 Rinckey eath. From this account to my
other account, how much rinky eath Do you think I'd have left?
Well, let's go ahead and try it, this will be the first
transaction that you're actually creating that you are going to
spend the gas for. So if we go ahead and hit send, we'll hit
transfer between my accounts. count two, we'll do 0.05. Next, we can see some information here about
what's actually going on Metamask has some new advanced
gas for UI and settings, we're also going to turn the song, so
go ahead and click that enable enhanced gas UI, turn that on,
and then go back. And again, this is going to be the
experimental tab. But it could also just be in the General
Settings tab. Depending on when you actually run this, we can
see a little notification here. Again, this depends on what
version of Metamask we're using. And we get this little drop down
that says Here are some of the different type of gas fees that
you can actually pay. The reason that gas fees might change, as
you can see here is that depending on how busy the
blockchain is, you have to pay more gas. If a lot of people are
sending transactions, that means there's not going to be enough
space for everyone's transaction to get through. That's a bit of
an oversimplification of what's happening. But don't worry too
much about it for now. Now, if we want to send the 0.05 ether
to our second account, we can see this gas estimated section,
which is saying it's estimating, we're going to pay 0.00004792
gas in addition to sending the 0.5 eath. So at the bottom, we
have amount plus gas fee. And this is going to be the total
amount that we're going to be spending on this transaction
0.05 is what we're sending. And we also have this gas piece. So
we go ahead and confirm, we now see we have a transaction
pending in our Rigby ether scan. And if we click on it, we can
even hit View on block Explorer. And a Rigby transaction hash
will pop up and depending on when you click it, it might say
indexing, this means that ether scan has received your
transaction and is trying to place it. If you don't see
anything here, it means that maybe the transaction hasn't
gone through yet. Maybe you need to wait a little bit more. Or
maybe you need to go back to the GitHub repo and pick the
recommended testament and faucet. So you might have to
wait a minute or so for this to actually finish indexing. After
a minute or so we can see that this transaction has indeed
passed. And we can see a lot of the same information that we saw
on our last one, this time with 0.05 ether. And now if we look
in our meta mask, we'll see we can see account one has 0.05
It's rounding up a little bit, we click on the big button, we
can see it actually has 0.049953, etc. And our other
account account two does have exactly 0.05. This is because we
spent a little bit of Aetherium on gas to send this transaction.
And now with just this little bit of information, you know how
to actually interact with applications that use the
blockchain, how to send transactions and a lot of the
non technical details. Now here's something that's
incredibly exciting with just this little bit of information.
You now know how to interact with blockchains and interact
with the Etherion protocol. So if you don't want to learn how
to code anything, you can go If you can start interacting with
Aetherium and interact with protocols with just as much
information. However, I know most of you guys are here to
learn how to code. So let's look under the hood of Aetherium. And
what is actually going on with these transactions, and what
these gas and what these blockchains. And what's really
going on, let's learn all the fundamentals of a blockchain.
Now, if you want to just go ahead and jump into the coding,
go ahead and grab a timestamp from the description. However,
learning exactly how the blockchain works is going to
make you an incredibly powerful developer. So let's take a look at that
first. So we're going to be going through this blockchain
demo on this site right here. Now, the creator of the site has
a fantastic video and a fantastic walk through
blockchain one on one, it is right on their site. So if
you're looking for another explanation, definitely check
out his video, it is absolutely fantastic. But the first thing
that we really need to do in order to understand blockchain
or just on really anything, and everything that's going on here
working first really need to understand this Sha 256, hash,
or hashing just kind of in general, let's first understand
what a hash is. A hash is a unique fixed length string,
meant to identify any piece of data, they are created by
putting some piece of data into a hash function. In this
example, the hashing algorithm used is Sha 256. Now Etherium
actually uses this, this right here for its hashing algorithm,
which isn't quite Sha 256, but as in kind of this SHA family.
But it's really just another way to hash things. And the specific
hash algorithm doesn't matter so much. So this example, you just
shot up to six, but you can imagine it's the same as the
Etherium. Hash, they're just going to result in a different
hash. So what's going to happen in this application here is
whatever data or whatever information we put into this
data section here, as you can see below this hash changes. So
what's happening is this data is running through the Sha 256 hash
algorithm. And it's outputting, this unique hash. So this hash
is a unique fixed length string, that's going to identify like a
blank data piece here, right. So if I put in, you know, my name
like Patrick Collins, this is the hash that's going to
represent Patrick Collins, right. And you can see, even
when I put, you know, tons and tons of data in here, the length
of the string doesn't change, right. So it's always gonna be
the same, we can put almost any amount of data in here, there is
an upper limit on the max size of the data. But for all intents
purposes, we can pretty much put any length in here. And you'll
see to that every time I type in Patrick Collins, this hash is
always gonna be this seven e five D, right? I'm gonna delete
I'm gonna do Patrick Collins, again, you're 75 B is always
this, this unique hash is always going to be unique, right, it's
always gonna be this fixed length string here. So now we
can take this idea while putting this data in here, we can move
on to this concept of a block. So with this block concept,
we're going to take the exact same thing with this hash this
this data section, right, but instead of having everything
just being in this, this singular data area right here,
we're going to split this data up into block, nuns, and data.
So all so what we're going to do is we're actually going to hash
all three of these to get to get this hash, right, we're gonna
put all three of these, we're gonna say all three of these are
combined. Together, we're gonna put every all three of them into
this hashing algorithm to figure it out. So if I type a bunch of
stuff here, we can see that block one with nonce, you know,
this nonce, and this data, we're going to get this hash. And as
you can see, actually, the screen turns red, this block
turned red. Now, what happens when I hit this mind button?
When I hit this mind button, it's actually gonna take some
time, it's gonna think for a little bit. And we can see that
the nonce here actually changed, right? The nonce is different
from what it was before. And this hash now starts with four
zeros. Okay, and then the back turn green. When we're talking
about mining, we're talking about miners solving some type
of very difficult problem that takes a lot of time to do now in
this example, here, the problem that the miners had to solve was
they had to find a nonce, or or a value in this nonce section
that when hashed with at block number one with this data, it
would start with four zeros. So the problem here the miners had
to solve was to start with four zeros and the only way for them
to really do that is kind of this brute force, you know,
trying stuff so they tried one okay, one didn't work. Okay,
two, nope, two didn't work. 3456 Okay, five, well, that started
with one zero, but it's not four. And they have to keep
trying all these numbers until they get to this one where you
know, let's hit mine again. Where it has four zeros at the
top at the start. Now, this specific problem changes
blockchain to blockchain right yet. Aetherium has a different
problem for miners to solve A bitcoin is different problems
from yourself, but this concept is going to be the same. So they
have to take it, one block is going to be this, this, this
concept is going to be all this data, it's going to be the block
number. And it's going to be this nonce, right. And so this
nonce is the solution is going to be the the number that they
use to get like the solution to the problem, right? So if I go
to one here, you know, I do this again, hit mine. And the nonces
changed, right? And went from one to 33,128. Because this is
the nonce that allowed this hash to start with four zeros. And so
that's what's happening. When blockchain miners are mining
they're going through this process is very computationally
intensive process of trying to find a nonce that fulfills
whatever the problem is. So that's really it, actually. So
that's a block. And that's really what's happening when
miners are mining. They're just looking, there's trial and
error, brute force trying to find this nut so so now that we
know what a block is, let's go to the next step and figure out
okay, well, what's a block chain. So here we have an
example of what a blockchain is going to look like. Right, we
have a combination, you know, we have back here in the block
section, we have one what one block looks like. Now here, we
have multiple different blocks, right, each one of these
represents a different block, but we have an additional column
here, we have additional variable here. So like before,
you know, we have block nonce and data, right, we have blocked
nonce data, we also have this thing called previous right, and
so this is actually gonna be pointing to the previous hash of
the last block. So for example, if we go to the last block in
this blockchain, it says previous 008. And if we look at
the hash of block number four, is 00008. And then we look at
its previous it's four zeros, B nine, we have four zeros, B,
nine, and so on, all the way back to our first block, which
has previous of just all zeros, right. And so the block with the
previous of all zeros, is going to be known as the Genesis
block. So you've probably heard that before the Genesis block,
it's the first block in the blockchain were the previous
hash points to a hash that doesn't actually exist. Now, as
you can imagine, kind of the same as how this block worked,
how the block nuts and dated all go through the hashing algorithm
in the blockchain, the block nonce data, and previous hash
all go through this hashing algorithm to figure out what the
hashes okay? So if we go to over here, you know, for example, if
I type in Patrick, obviously, this is now no longer valid,
right? Because this nuns combined with the block the data
in the previous hash, aren't going to solve our problem of
having four zeros at the at the start, right. So I'm gonna go
and fix that. And that's, that's kind of an easy way to see it
being broken. But, but let's take a look, if I break this
block, right here, what happens if I, if I break the data in
here, if I do like Patrick in here, you can see that both of
these are now read, both of these are now invalid, right?
Because the block hash with the nonce hash with the new data,
which is my name, Patrick has hashed with the previous block
is now a brand new hash, right, and this block is still pointing
to this previous hash right here, right is pointing to this
previous block. And now it is wrong, and it is messed up and
now, and now it's nuts with this previous hash is also wrong.
Right? And this is where when we talk about blockchains, being
immutable, this is exactly how it's immutable, right? Because I
go back and I change anything, you know, if I've just typed a
right here, the entire blockchain is now invalidated.
Because none of these are going to have nonces that solve this
equation anymore. So this is why blockchains are immutable is
because anytime you change one thing, you ruin the rest of the
blockchain, okay? So however, though, you know, if it was
here, originally, we can go ahead and mine these, mine all
these but as you can see, you know, this is going to start
getting very computationally expensive, because I have to go
redo basically the entire blockchain. And the farther and
farther down the line you get, the harder and harder it becomes
to, you know, rehash and redo all these different block chains
here. Now, this makes a lot of sense, right? So we have this
blockchain, it's really hard to change something in the past,
but if we do, we can just go ahead and remind it. Now if I'm
the one who controls the blockchain, right, if I'm the
one who controls this, you know, and I want to change something,
the past will, okay, great. All I got to do is change the state
of here. And then you know, mine, each one of these, you
know, obviously, it's going to be very computationally
expensive, but it's something that I can do right if I'm the
one who owns the blockchain. Now, here's where the
decentralized nature or the distributed nature really makes
it incredibly powerful. So we're gonna go to the distributed tab
here, which is also referred to as the decentralized tab here,
and it's going to show us what a blockchain looks like in a
decentralized manner. So we have this exact same initial setup
here we have to Shoot a blockchain, we have our first
blockchain, which is kind of exactly as the one from here.
But we also have more than once we have peer, a peer beam, and
PRC and when people are talking about Peer to Peer, peer to peer
transactions through the talking, this is kind of that
concept that they're talking about, right. So we have a
number of different peers who are running this blockchain
technology, they're all weighted equally, right, each one of
these peers or each one of these nodes, each one of these
entities running a blockchain has the exact same power as
anybody else, right. So the way that we can tell very easily
which blockchain is correct, or which ones are correct, or by
looking at this end, hash here, right, or by looking at where we
are in the blockchain, because again, remember, because again,
remember this, this hash that this this in this last block
here, is going to encompass all of the blocks from before,
right, because this last hash is going to have the previous hash
here, which includes the previous hash here, which this
hash includes the previous hash here. And so this last hash is
encompasses everything in here, right? And we can look, we can
look at the hash of Piercey, which is four zeros, and then E
four B, we can look at the latest hash appear B, which is
four zeros, E for B, and then pure A, which is four zeros, E
for b. So all of these peers, all of these nodes, all of these
decentralized, you know these independent, all these
independent users running this blockchain software, they're all
matched up, it's very easy for their nodes to look at each
other and say, hey, great, we are all matched up. Now, what
let's say that a decides that, you know, something happened on
the blockchain that they didn't like, and they wanted to go back
and change something, right. So let's say they change here, you
know, obviously, the rest of their blockchain is invalidated.
And they have to spend a lot of computational power to catch up
to speed. So let's go ahead and humor it. Let's say that they
did, they ended up catching up. They ended up catching up, you
know, they ended up mining everything. And now they have a
valid blockchain. Right? It solves the equation. Awesome.
However, in block number three, there's something new, right?
This is here, and it shouldn't have been here, this is some
that Peer A put in by themselves. All that happens now
is we look at all the blockchains that are running the
software, and we're looking at all the hashes and hash at block
number five. So pure A has this new hash. Now, there's a 09 BC.
But pure B has a different hash 00, e for B, right? So who's
right? Is it disappear a with their new stuff? Or is it pure
B? Well, that's where the decentralized data comes in.
Because then we can look at Piercey Piercey, also as E
forby. So if you're being Piercey will say, Hey, you're a,
you're wrong, get out, right. And pure A will stop being able
to participate in the mining rewards because they have
essentially forked the blockchain and started their own
little blockchain right with their own history, because
they're the only ones with this, this piece of data in block
three, whereas pure B, and pure C have nothing in there. So that
really shows why in these blockchain worlds in this
decentralized world, there really is no centralized entity,
you know, pure A, you know, might have been maliciously
motivated to change. You know, there's this block number three,
however, democracy rules, right, the majority rules in the
blockchain, pure vmpfc will say, hey, you know, the, that's cute
and all puree. But you're wrong, right? That's not right. Now, it
might be a little abstract, that you just look at data and you
know, as typing kind of random stuff in here and think, okay,
yeah, that's, that's data, right? That makes sense, you
know, just kind of random strings in here doesn't really
do anything for us. So if we actually go over to the token
section here, this is where everything really starts to make
a lot of sense. So we have the exact same setup here with pure
a pure B Piercey. Except and the difference is, instead of having
kind of this, this data section, we have this TX This transaction
section, right? And this represents all the transactions
that are happening in this block, right? So we're sending
$25, from Darcy to Bingle, or to Bingley force toward dollars and
27 cents here. 1922, right. And it's the exact same thing. So
this, all these transactions are gonna get hashed in the exact
same way that the data is going to get hashed. And, and this is
why it's so powerful, because again, you know, if I want to be
malicious, right, if, if I want to say, hey, I really wanted to
give Jane a lot more money from Elizabeth, so I'm puree and I go
back and I change it to 100. Well, now, you know not only do
I does my whole blockchain get invalidated because that was so
so long ago, but I'm not going to match any of these other
chains. Right? And so my blockchain is going to be
excluded from the overall blockchain. So and let's let's
go ahead and fix this. And it's the same thing if down here if I
become malicious, and I want to send you know, I want Miss Audrey to have less money.
Maybe I want to send $1 And they go had in mind it the same thing
here, this hash now this two a one is not going to match the
rubies rubies hash of BBA. And it's not going to match Pierce's
hash of BBA as well. So the two of them are gonna say, hey,
this, your blockchain is invalid, it's not matching the
majority, you know, you're out, right. So that's really how
these blockchains work at a low level. And it all goes back to
this, this understanding this hash idea, and using it in this
very sophisticated manner, to kind of cryptographically prove,
you know, where, where stuff lies. Now, the way the
blockchain works is, instead of random stuff, put in the Status
section, it's actually going to be solidity code in here to
finding ways to interact with different blocks and different
protocols that are on chain, or, as we've said before, different
smart contracts. Now, the next question that you might be
asking is, okay, well, how do I know how can I be sure that I'm
the one? You know, let's say this is, let's say, I'm Darcy
right? How can I be sure that I was that Darcy was the one to
actually send us money here. How do we know that Darcy sent $25.
To Bingley? Well, this is where we get into private keys and
public keys. And that's what we're going to go into. Now.
Let's just do a quick recap of what we've learned in this
section. So far, right? We've learned that Aetherium actually
runs on this hit check 256. But we use Sha 256. For this demo,
it doesn't really matter. We're just talking about hashing
algorithms. So again, hash is a unique fixed length string meant
to identify any piece of data. A hash algorithm or a hash
function is a function or algorithm that computes any type
of data into a unique hash. Mining is going to be the
process of finding the solution to the blockchain problem. In
our example, the problem was finding a hash that starts with
four zeros. nodes get paid for mining different blocks. And the
problem is going to be different blockchain to blockchain a block
and a blockchain is basically a combination of a block, nonce
transaction and previous hash to create this unique hash for this
block. And again, depending on the blockchain implementation,
this might have a couple other fields or might have different
fields. But this is essentially what's going on blockchains are
decentralized and distributed because many independent users
are going to run this blockchain software. And they will check
and then we'll compare against each other to see which
blockchains are acting honestly, and which ones are acting
maliciously, in the blockchain world majority rules. The nonce
here is the answer used or the number used to get this hash.
Now nonce is kind of an overloaded term, it's actually
used for a number of different reasons. In this case, we're
using it to solve this problem of getting four or five zeros at
the stop or the hash. However, in Aetherium, it will also be
often used as the number of transactions from a given
address. So now we're going to talk a
little bit about signing these transactions and private keys
and some other cryptography pieces, right? Because in this
blockchain demo here, we can see we have all these these
fantastic transactions, right? All these things went through,
but how do we know that it was Darcy? Who was the one to send
$25? To bangli? Right? How do we know that actually happened. And
this is where all those pieces that we just learned about in
our test net, in our meta mask account are really going to
start to, to come to life here a little bit here. So here we have
an example of public and private keys, okay, at the top, we have
this private key, right that was that was randomly generated. A
private key is you know, as it kind of states is a key that you
really want to keep secret, because you're going to be using
this as kind of your your secret password for all your
transactions where I can really pick, you know, any, any, any
private key, anything that I want. And with it, this
algorithm, or they're going to use an algorithm for Aetherium.
Bitcoin, they both use this elliptic curve, digital
signature algorithm, it's a variant of just a digital
signature algorithm. And it's going to create this this public
key, right, I'm really not going to go at all into kind of this
digital signature algorithm. But just know it does use some of
these, some of the hash knowledge that we just learned
combined with some other pieces to kind of get this this public
here. So I'm not gonna go too deep into it. But we have this
private key that we create. And we get this public key. Now this
public key we want everybody to have access to right this is
yeah, whole world can see this, this private key, we really want
it to be private, we don't want people to see this, we're going
to use this private key as like a password to quote unquote,
digitally sign transactions, and then people can verify them with
this public key. So let's, let's see what this actually looks
like. Let's pick a random key, a more secure key, right? Because
the longer it is, the more secure it's going to be. And if
we go to signatures now, right? Let's say we have this, this
message that we want, right? We'll say hi world, right? We
want this To be the message, what's gonna happen is this
private key that we've created, we can use to sign this data,
right? Remember how in the blockchain demo, you know, we
were kind of we were hashing stuff, right? We were using this
Shea 256 hash to get this hash. Well, we're doing something
similar. But instead of hashing, we're, we're using this digital
signature algorithm to create this message signature. Now,
what's really powerful about how this this algorithm works, is
that you can create this message signature with your private key,
but somebody else can't derive your private key from the
message signature. And that's what makes this really, really
powerful. However, if we go to verify using this public key,
right, and so this is the this is that, Oh, 403. This is that
same public key, using this, using this public key, anybody
can verify, let's go ahead and sign again, anybody can verify
that the signature is yours, right? So you have a public a
private key, just for you. So you can sign things and a public
key that anybody can verify something, right. So anybody can
verify this, and let's say somebody tries to fake a
transaction from you, they say, Hey, you know, this is this is
this is their transaction, all they have to do is verify that
this signature against your public key and very easily, this
whole thing turns red, because it isn't verified, right, that
the algorithm says, hey, that's wrong. So we can go ahead and
take that into transactions in this exact same way. So if I
want to send money, you know, if I want to send $400, from, you
know, my address to another address, using my private key, I
can sign that transaction. And anybody else in the world can
then verify this transaction, right. And this is why when
people say Hydra keys, you know, protect your keys, this is what
we're talking about in our accounts here. Right? If we go
to settings, and again, the only reason that I'm showing you
guys, my pneumonic, and my private key is because this is
a, this is a dumpster account, I'm going to throw this away at
the end of this video, or I'm just not gonna put any real
money in it. But when we look at our Metamask, here, we have this
pneumonic phrase, which allows us to easily get these different
private keys, right? So pneumonic phrase combined with,
you know, whatever account number will get us a private
key. So mnemonic phrase combined with one, we're gonna get this
private key. And this is when we look at account details, export
private key. That's where it confirm, this is
going to be the private key that we're going to use to sign our
transactions, right, this, if anybody else gets access to this
private key, they then can sign transactions for us, and they
can send transactions for us. And that's why we want to keep
these private, so that it works the exact same way, right. And
so this is why it's so important to hide your private keys and
hide your mnemonics now, your Aetherium address is actually a
piece is actually a piece of your public key. Now, to get our
address in Aetherium, all we have to do is take this public
key that we've created with our private key, hash it using that
same Aetherium hashing algorithm, and then take the
last 20 bytes. And that's how we'll actually derive to our to
our address here. Now, knowing the exact methodology of how to
get the address doesn't really matter, because it could change
blockchain to blockchain and could even change it too. But
just know that that is essentially how kind of these
addresses are derived or there's some derivative of the public
key, right, because the public key is public. And you know,
using the public key and kind of any public way is totally fine,
but not the private key. So that is how we sign our transactions.
Note though, this isn't how we send the transaction. So so this
is just going to assign it create a transaction for us to
send, we'll learn later on how to send these transactions.
Cool. So that was a lot of information there too. Let's do
a quick recap, your public key is derived by using a digital
signature algorithm on your private key, right, and you want
to keep your private key private at all times, because you're
going to use your private key to sign transactions. Signing
transactions with your private key, you are the only one who
can actually do this because you can't get the private key from a
message signature. However, using your public key, you can
anybody can very easily verify that a signature that signed by
you is in fact signed by you in our meta mask. Our private keys
are located in this account details section you just hit
show private keys and type in your password. And you'll get
your your private key here. A quick note here is oftentimes
when using your private keys somewhere, they want it in
hexadecimal form. So if we're going to use our private key for
something like brownie, which we'll go into later, we need to
actually append a 0x to the front but We'll get into that
later. And the address of your account is derived from this. So
if you think about your private key creates your public key,
which then can create your address. And there's a little
barrier or a big barrier here. Because your private key, you
want to keep private and your public key and your address can
all be public information. Now that we know a little bit more about what's going on
underneath the hood of these blockchains, let's go back at
our transactions and look at this gas thing again, and we'll
look to see what's actually happening here, gas in
particular can be a little bit tricky to wrap your head around.
So if you don't get it right away, don't worry. As we go
through examples, it'll start to make more sense. So before I was
saying, let's just look at this transaction fee bid, which is
the costs associated with running this transaction. If I
scroll over this on ether scan, I can see this thing that says
block base fee per gas plus max party fee per gas times the gas
use, which might be a little bit confusing here, let's actually
break down what's going on on Aetherium with ERP 15, five nine
in place. And again, this is going to be specific to
Aetherium, as every blockchain might do it a little bit
differently. But if we click to see more, we can see a number of
useful values here, we can see gas limit is 21,000. And usage
is 21,000. So this transaction used 21,000 gas, and we sent
21,000 gas along with it. Sometimes when sending a
transaction, depending on when it's sent. And depending on what
the specific instructions are, it might actually use way more
gas than what you want it to use. So with your transactions,
you can actually set a limit, hey, I don't want to use more
than x amount of gas, I don't want to do more than x
computational units. And in fact, we go to our Metamask. And
we click Send to transfer between accounts again, and we
pick you know, 0.01 eath, or something next can actually hit
this little button here, go to Advanced, and we can actually
edit some specifics of this transaction, one of them is
going to be the gas limit, we can change this gas limit to
maybe 2200 2300, or more or even less, since sending Aetherium
takes exactly 21,000 Gas Metamask just defaults to
setting into that. Well, we also see these other interesting
things, we see a priority fee, and a max base fee. Let's reject
this transaction. And let's look back at ether scan to talk about
these. So currently in Aetherium, according to EE IP
1559, every transaction on Aetherium comes with something
called the base fee. This is the minimum gas price you need to
set to include your transaction. And you'll notice that these are
priced in something called gateway. So what is a gateway?
If we come to the site eath converter.com. And again,
there's a link to this in the GitHub repository, we scroll
down we can see way gateway and ether five put one ether in
here, I can see how much one ether is in terms of way. And in
terms of way, one ether is equal to 1-234-567-8990. So that's
that's 1 billion way is going to be one ether. And then
1-234-567-8910 1112 1314 Did 16 Seven, eight team and then 18
zeros is away. These are just easier ways of referring to
really, really small amounts of Aetherium. So if we look at our
gas fees, we see that the base fee is 0.00000004 Go away. And
this obviously would be an even smaller number if this was in
units of weigh. So if we take this number, and we put it into
our calculator, we can see that this is equal to 40 weigh or
0.0000 a whole bunch of zeros for ether. The max fee here
refers to the maximum gas fee that we're willing to pay for
this transaction. And you can actually see that our max fee is
a little bit higher than what we actually ended up paying. Our
maximum was 2.2132 something something and the gas price we
actually paid was up here. Now your transaction might of course
be a little bit different than Additionally we have a max
priority fee. This is going to be the max gas fee that we're
willing to pay plus the max tip that we're willing to give to
miners. Now currently in Aetherium, this base fee ends up
getting burnt and we can see on ether scan exactly how much is
getting burnt here. And if we pull up our calculator again, we
can grab this gas fee, multiply it by the amount of gas we used,
and we can see that this is indeed how much Aetherium we
actually ended up burning. We go back to Ethereum converter,
paste it in we can see that these two numbers are indeed
equal. This means whenever you send a transaction, a little bit
of Aetherium is removed from circulation forever, or it's
considered burnt. So currently, in theory As part of your
Aetherium part of your transaction fee actually gets
burnt. And then the other part goes directly to miners. So to
figure out exactly how much went to miners, we could do this
number minus the burnt amount. And this is how much Etherium
was paid to Aetherium miner for this transaction, you'll see
down here your transaction type to ERP 15, five, nine, this is
the eip 15 five nine version of these transactions. Like I said,
every blockchain is going to have a different fee burning and
fee and gas process. And they're all going to be a little bit
different, but the some of it is blockchains have limited block
space for transactions, the gas price that costs for your
transaction to be included in one of these blocks changes
based off how much demand there is the base gas fee for
Aetherium will go up and down depending on how many people are
sending transactions and how many people want to be included
in a block. If a ton of people want to be included in a block.
That means a ton of gas is obviously going to get burnt.
We've left a link to a video in the GitHub repository with this
section from this YouTuber who does an amazing job breaking
down this EIP 15, five, nine and more about how this gas model
actually works. I highly recommend you pause this video
and watch that video. To understand more, the base fee
gets programmatically algorithmically adjusted to try
to target for all the blocks to be 50% full. If they're more
than 50% full, this base fee automatically goes up. If
they're less than 50% full, this base fee goes down. Now this is
a lot of the basics of how this transaction works. And it can be
a little confusing. So let's do a quick refresher of everything
in here. There's a unique transaction hash that uniquely
identifies this transaction. On this blockchain, we can see the
status, we can see the block number that it's confirmed on.
One other thing we want to look at. If we scroll up, we see
block number and block confirmations. This is how many
blocks have been mined. Since this block was included. Like we
saw with our blockchain demo, the longer the blockchain gets,
the harder it is to tamper with and the more secure it is
typically, you'll see some processes say they'll only do
something after 20 Block confirmations, 30 Block
confirmations or etc. The reason that they wait for these block
confirmations is because they want to make sure that that
transaction is actually included. And we can actually
see the block that our transaction was included in and
all the other transactions with it, different details about how
much gas was used, the gas limit, etc. timestamp is when
the transaction happened, we can see from and to we can see the
value. And then we can see the transaction fee, which we see
right here is blocked base fee per gas plus the max priority
fee per gas times the gas used. And we see all the details of
the gas down here gas price is the cost of one unit of gas gas
limit is the max amount of units of gas that we're willing to pay
in this transaction, the usage is how many actually got us the
base fee is going to be the base network fee per gas. So 40 way
per one gas used, the max gas is the max gas price we're willing
to pay. And Max priority is gonna be the max gas price, plus
the tip that we give to miners, and then we can see how much is
burnt. And then we see transaction savings which which
is the difference between how much was actually used or paid
for and then returned. So for example, in this transaction,
the gas price we ended up picking was a little less than
our max gas price here. So the gas price we ended up using was
a little less than our max priority fee here. So we had
some savings compared to that, we can also see that this was an
ERP 15 five nine transaction, we can see our nonce here, which
was not zero because the transaction that I'm showing is
our first nones. And then of course, we can see the input
data for transactions that are just sending Aetherium, the
input data is going to be blank. But you'll see that when we get
to smart contracts, the input data is not going to be blank.
And it's going to be one of the most important features of these
transactions. You'll also notice that there's a state tab. This
is an advanced tab, and it shows the different states that are
changed based off of this transaction. We're going to
ignore this one for now. Now that we know how the blockchain
itself works under the hood, let's talk about some blockchain
fundamentals. And we actually covered all these topics in a
previous Freako camp video. So let's go to that. If the first time you listen to this, some of
these concepts seem a little bit hard to grasp. Don't worry about
it. As we continue and as we move on with this course,
they'll start to make more sense when you see them used in real
examples. I definitely would recommend going back and
rewatching and re listening to the parts that you don't quite
get an asking questions in the discussions tab of the GitHub
repository. Awesome. So now that we know all the cryptography
pieces and all the little nitty gritties of how the blockchain
actually works, and how our signatures work and how
everything sticks together. Let's talk a little bit about
how this works, in actuality, and what's really going on. Now
for a lot of this, each different blockchain has
slightly different algorithms and slightly different metrics
and criteria for doing a lot of this stuff. So when we're
talking about these specific implementations, keep in mind,
the exact algorithm might be a little bit different, but the
concepts are all still going to be exactly the same. Hashing and
hash function is going to be the same. No matter where you look
at decentralized blockchain, it's going to be the same no
matter where you look, how it's actually implemented, is going
to be a little bit different. Now traditionally, when you run
an application, you will be website or something that
connects to some server, you are interacting with a centralized
entity. And unlike how we saw with the blockchain with
multiple different peers, it's going to be run by a single
centralized group. Now, it still could be run on many different
servers, but all those servers are still going to be controlled
by the same centralized group blockchains, as we saw run on a
network of different independent nodes. When we saw a peer, a
peer, B Piercey. Those were different examples of different
independent users running the blockchain technology on their
own node. Now, when I use the term node, I'm usually referring
to a single instance of a decentralized system. So when I
say a single node, when I'm talking about a blockchain, I'm
talking about one of those pure A's pure BS pure C's running
that blockchain software, I'm talking about one server running
this technology. And again, it's this network. It's this
combination of these nodes interacting with each other,
that creates this entire blockchain. What makes these so
potent too, is that anybody can join the network. And that's why
there's decentralized the barrier to entry is a little bit
of hardware requirements for getting the correct materials to
run the software. And then you running the software, anybody
can join these networks and participate. And that's what
makes it truly decentralized. In fact, you can go to GitHub right
now, and run your own Aetherium node in a few seconds. Now in
the traditional world, applications are run by
centralized entities. And if that entity goes down, or is
maliciously bribed, or decides that they want to shut off, they
just can't, because they are the ones that control everything.
blockchains, by contrast, don't have this problem. If one node
or one entity that runs several nodes goes down, since there are
so many other independent nodes running that it doesn't matter,
the blockchain and the system will persist so long as there is
at least one node always running. And luckily for us,
most of the most popular chains like Bitcoin and Aetherium, have
1000s and 1000s of nodes. And as we showed in our demo, if one
node acts maliciously, all the other nodes will ignore that
node and kick that out or even punish it in some systems,
because they can easily check everybody else's node and see,
okay, this one is out of sync with the majority. And yes,
majority rules when it comes to the blockchain. Each blockchain
keeps a full list of every transaction and interaction
that's happened on that blockchain and we saw if a node
tries to act maliciously, then all their hashes are going to be
way out of whack and they're not going to match everybody else.
This gives blockchains this incredibly potent immutability
trait where nothing can be changed or corrupted. So in
essence, we can think of a blockchain as a decentralized
database. And with Aetherium, it has an extra additional feature
where it also can do computation in a decentralized manner. Now
let's talk consensus, proof of work and proof of stake because
you've probably heard these before. And they're really
important to how these blockchains actually work. We
went through that blockchain example, and we did that mining
feature. This is what's known as proof of work. Proof of Work and
proof of steak fall under this umbrella of consensus and
consensus is a really important topic when it comes to
blockchains. Consensus is defined as the mechanism used to
reach an agreement on the state or a single value on the
blockchain, especially in a decentralized system. I briefly
alluded to this consensus mechanism in our blockchain
example, when I said if one change is something and the
other two, don't, then majority will rule and kick that one out.
This is part of that consensus mechanism. Now very roughly a
consensus protocol in a blockchain or decentralized
system can be broken down into two pieces, a chain selection
algorithm, and a civil resistance mechanism, that
mining piece that we were doing, or where the proof of work
algorithm is what's known as a civil resistance mechanism. And
this is what Aetherium and Bitcoin currently use. Please
note that depending on when you're watching this, if eath
two is out, then it's no longer proof of work. Now, proof of
work is known as a civil resistance mechanism, because it
defines a way to figure out who is the block author, which node
is going to be the node who did the work to find that mine and
be the author of that block so all the other nodes can verify
that it's accurate civil resistance is a blockchains
ability to defend against users creating a large number of
pseudo anonymous identities to gain a disproportionately
advantageous influence is over set system. And in layman's
terms, it's basically a way for a blockchain to defend against
somebody making a bunch of fake blockchains so that they can get
more and more rewards. Now, there are two types of civil
resistance mechanisms that we're going to talk about here. Namely
proof of work and proof of stake. Let's talk about proof of
work a little bit more in depth first, in proof of work. This is
civil resistant, because a single node has to go through a
very computationally expensive process called mining, which we
demonstrated earlier to figure out the answer to the
blockchains Riddle of finding that correct nonce, or, or
whatever the blockchain system has in place.
And proof of work. This works because no matter how many
pseudo anonymous accounts you make, each one still has to
undergo this very computationally expensive
activity of finding the answer to the proof of work problem, or
the proof of work riddle, which again, in our demonstration, it
was finding a nonce with that first four zeros. But again,
each blockchain might change the riddle work or change the
problem to be a little bit different. In fact, some of
these blockchains make this riddle intentionally hard or
intentionally easy to change what's called the block time,
the block time is how long it takes between blocks being
published. And it's proportional to how hard these algorithms
are. So these problems actually can change. Depending on how
long they want the blockchain to be. If a system wants to block
time to be very, very long, they just make the problem very, very
hard. If they wanted to be very short, they make the problem a
lot easier. We'll talk about civil attacks in a little bit
and how they can affect the system. But with proof of work,
it's a verifiable way to figure out who the block author is and
be civil resistant. Now, you need to combine this with a
chain selection rule create this consensus. Now, there's some
consensus protocols that have more features, but very, very
roughly, these are the two pieces that we're going to look
at. The second piece is going to be a chain selection rule. How
do we know which blockchain is actually the real blockchain and
the true blockchain now on Bitcoin and Aetherium, they both
use a form of consensus called Nakamoto consensus. And this is
a combination of proof of work and longest chain rule, the
decentralized network side that whichever blockchain has the
longest chain, or the most number of blocks on it is going
to be the chain that they use. This makes a lot of sense,
because every additional block that a chain is behind, it's
going to take more and more computation for it to come up.
That's why when we saw in our transaction, we actually saw
confirmations. The number of confirmations is the number of
additional blocks added on after our transaction went through in
a block. So if we see confirmations as to it means
that the block that our transaction was in has two
blocks ahead of it in the longest chain. Now, I do want to
point out that a lot of people use proof of work as a consensus
protocol. And I do want to say that this is a little bit
inaccurate, but sometimes people use it interchangeably. Proof of
Work is a piece of the overall consensus protocol, which in
Bitcoin and Aetherium. One current case is Nakamoto
consensus, Nakamoto consensus is a combination of proof of work,
and this longest chain rule, both equally and very, very
important. Now, proof of work also tells us where these
transaction fees and these block rewards go to remember how when
we made this transaction, we had to talk about gas and a
transaction fee. So who's getting paid who was getting
this transaction, and this transaction fee is going to the
miners or the validators in a proof of work network? They're
called miners and in the proof of stake network, they're called
validators there are a little bit different. And we'll get
into that when we talk about proof of stake in this proof of
work system. All these nodes are competing against each other to
find the answer to the blockchain riddle. Remember, in
our example, it was to find a hash that has four zeros at the
start. And again, depending on the blockchain implementation,
that riddle is going to be a little bit different. But all
the nodes are trying as many as possible to try to get this
answer first. Why? Because the first node to figure out the
answer to the blockchain real is gonna get that transaction fee,
they're gonna get paid from that. Now, when a node gets
paid, they actually get paid in two different ways. One is going
to be with a transaction fee. And another piece is going to be
the block reward. Remember how we talked about alternating the
gas price or the gray on our transaction? Well, that's the
transaction fee that we're going to pay to these blockchain nodes
for including our transaction, the block reward is given to
these nodes from the protocol from the blockchain itself.
You've probably heard of the Bitcoin halving before the
halving is referring to this block reward getting cut in half
and it's supposed to be cut in half, roughly every four years.
This block reward increases the circulating amount of whatever
cryptocurrency that is being rewarded. For example, on
Aetherium the block reward is giving out Aetherium and a
Bitcoin the block reward is giving out Bitcoin. So these
nodes are competing against each other to be the first one to
find this transaction to be the first one to find the answer to
this problem, so that they can be the ones to win both this
block reward and your transaction fee. Some block
chains like Bitcoin, for example, have a set time when
they're no longer going to give out block rewards and the miners
or the nodes are only going to get paid from trends. Action
fees. Now this gas fee, again is paid by whoever initialize the
transaction. When we got our funds from the faucet, there was
some server and somebody else was paying the transaction fee
for us. However, when we sent ether from one account to
another, our first account actually paid some transaction
fee to send that ether. In proof of steak. There's also a gas
fee, but it's paid out to validators instead of miners.
And we'll talk about that in a little bit. Now let's talk about
two types of attacks that can happen in these blockchain
worlds. Let's talk about the first one being the Sybil
attack. The Sybil attack is when a user creates a whole bunch of
pseudo anonymous accounts to try to influence a network. Now,
obviously, on Bitcoin and Aetherium, this is really,
really difficult because user needs to do all this work in
proof of work or have a ton of collateral and proof of stake,
which again, we'll talk about in a bit. The other more prevalent
attack is what's known as a 51% attack. Now, as we saw as part
of our consensus protocol, these block chains are going to agree
that the longest chain is the one that they're going to go
with, so long as it matches up with 51% of the rest of the
network. This means that if you have the longest chain, and you
have more than 51% of the rest of the network, you can do
what's called a fork in the network, and bring the network
onto your now longest chain. Now Sybil attacks, obviously, are
when a single node or a single entity tries to affect the
decent reality of the network by pretending to be multiple
different people, although they're just the same person or
entity. And like I said, it's really difficult to do in proof
of work and proof of steak. So you can see now that blockchains
are very democratic, whichever blockchain has the most buy in
and is the longest is the blockchain that the whole system
is going to corroborate. When nodes produce a new block and
add to the longest chain, the other nodes will follow this
longest chain that the rest of the network is agreeing with,
add those blocks to their chain and follow up. So very small
reorganizations are actually pretty common when a blockchain
picks a block from a different longest chain puts it on and
then has to swap it out for another block and continue with
a different blockchain. However, if a group of nodes had enough
nodes or enough power, they could essentially be 51% of the
network and influence the network in whatever direction
that they want it. This is what's known as a 51% attack.
And it's happened on blockchains like Ethereum classic, which is
not Aetherium. This is why the bigger a blockchain is, the more
decentralized and the more secure it becomes. So after you watch this video,
and you become a blockchain engineering expert, I definitely
recommend you run a node as well, because you are going to
increase the security of the network as a whole by running a
node. So proof of work is fantastic because it allows us
to very easily protect against the Sybil attacks and keep our
blockchain is decentralized and secure. However, it has some
drawbacks as well. Proof of Work costs a lot of electricity,
because every single node is running as fast as they can to
win this race to get the rewards. This leads to obviously
an environmental impact. Now since proof of work and Nakamoto
consensus, a lot of other protocols have taken this idea
and gone in a different direction with a different civil
resistance protocol, a lot of them with the intention to be a
lot more environmentally friendly. And the most popular
one right now is proof of stake. There are some chains that are
already using this proof of stake protocol, and that are
live and thriving. Some of them are like avalanche, LaLana,
Polygon, polka dot and Terra and additionally Aetherium is
decided to upgrade to eath. Two, which will have this proof of
stake algorithm as well, it will also have some other features,
which we'll talk about in a bit. Now as a quick aside, all the
tools that we're going to learn here are still going to work in
eath. Two, so depending on when you watch this, everything here
is still valid. So let's talk about proof of stake. Now,
again, this is a different civil resistance mechanism. Instead of
solving this difficult problem, proof of stake nodes put up some
collateral that they're going to behave honestly, aka, they stake
in the example of Aetherium. two nodes put up some Aetherium as a
stake that they're going to behave honestly in the network,
if they misbehave to the network, they are going to be
slashed or remove some of their steak. Obviously, this is a very
good civil resistance mechanism. Because if you try to create a
whole bunch of anonymous accounts, then each one of those
accounts, you have to put up some stake. And if you
misbehave, you're going to run the risk of losing all the money
that you put up as collateral. In this system, miners are
actually called validators because they're no longer
binding anything, they're actually just validating other
nodes. Now, unlike proof of work, which every node is racing
to be the first one to find the block, and proof of stake nodes
are actually randomly chosen to propose the new block and then
the rest of the validators will validate if that node has
proposed the block. Honestly, as we saw with our cryptography
lesson, it's usually very easy for other nodes to verify if a
proposal or a transaction is honest. Now randomness is a
really important topic when we're talking about blockchains.
Because keep in mind, these blockchains are deterministic
systems. They're walled gardens from the rest of the world. And
as you know, a deterministic system by definition can't have
random numbers. So how do we choose the random validators in
the system? While it changes from blockchain to blockchain,
and actually choosing the node will change blockchain to
blockchain, but eath two, they're using what's called Rand
doubt, at least for the original implementation. This is a
decentralized autonomous organization that collectively
chooses the random number and collectively chooses which node
is going to run. Next, we aren't going to dive too deep into this
because there's a good chance that this might change in the
future. But we will go into randomness solutions and
blockchain later on in this course. Now, proof of stake
obviously has some pros and cons as well, pros are that again, it
is a great civil resistance mechanism. And a great way to
figure out who the author of a block should be. The other pros
are that it's way less computationally expensive to
figure out the new block, because instead of every single
node on the network trying to do this, only one node needs to do
this. And then the rest of the nodes just need to validate it.
The cons are that it's usually considered a slightly less
decentralized network, due to the upfront staking costs it
cost to participate. Now, this gets into a little bit of a
philosophical battle on how decentralized is decentralized
enough. And I think that's up to the community to decide. And as
we progress, I think we'll learn more and more about how
decentralized is decentralized enough. The general consensus
amongst blockchain engineers, though, is that proof of stake
is very, very decentralized and very secure. This massive
environmental impact improvement is one of the two main reasons
why eath is shifting to eath. Two, it reduces the
environmental impact by up to 99%. Now, these are the main
pieces of proof of work and proof of stake. But I did want
to talk about another concept that's really important in these
ecosystems. And that is scalability. When we were
talking about gas prices, we were saying that the gas prices
can get really high if a lot of people want to send a
transaction, because a block only has so much black space,
and the nodes can only add so many notes. So when a lot of
people want to use a blockchain, the gas price skyrockets. This
is not very scalable, because if we want to add more and more
people to these blockchains, it's going to cost more and more
to use the blockchains. Because more people are going to want to
get into these blocks. This means that there's kind of a
ceiling to how many people can use the system because of the
financial constraints that will get imposed as gas prices keep
rising. Aetherium too is not only attacking the environmental
impact of proof of work by switching to proof of steak, but
they're also implementing this new methodology called sharding.
And sharding is a solution to the scalability problem, a
sharded blockchain really just means that it's going to be a
blockchain of blockchains there's a main chain that's
going to coordinate everything amongst several chains that hook
into this main chain. This means that there's more chains for
people to make transactions on effectively increasing the
amount of block space that there is sharding can greatly increase
the number of transactions on a blockchain layer one now there's
another term that might be the first time you heard it, a layer
one, we're going to talk about layer one and layer twos in
terms of scalability really quickly as well. A layer one
refers to any base layer blockchain implementation
Bitcoins, a layer one Aetherium the layer one avalanches, a
layer one, these are the base layer blockchain solutions. A
layer two is any application that is added on top of a layer
one added on top of the blockchain. Some examples of
layer twos are going to be chain link arbitrage, or optimism.
Arbitrage and optimism are very interesting because they are
layer twos that also look to solve this scalability issue.
Arbitrage and optimism are what's known as roll ups and
they roll up their transactions into a layer one like Aetherium,
we're not going to go too deep into roll ups and how they
actually work. But all you really need to know is that a
roll up is kind of like a sharded chain, they derive their
security from the base layer from the layer one like
Aetherium. And they bulk send their transactions onto the
layer one, they solve some of the scalability issues by being
another blockchain that people can make transactions on, still
on kind of this base Aetherium layer. Now they're different
from side chains. Because side chains derive their security
from their own protocols, roll ups, derive their security from
the base layers. So arbitrage and optimism, for example, is
going to be just about as secure as Aetherium. There's some
fantastic guys in there that go a little bit deeper into roll
ups and I've left a link in the description for you. All right,
so we just talked about a lot of stuff. So let's do a quick recap
before moving on. Aetherium and Bitcoin are currently both proof
of work blockchains that follow Nakamoto consensus, however,
Aetherium is moving to Aetherium two, which will be a proof of
stake sharded blockchain Sybil attacks are prevented due to
protocols like proof of work and proof of steak 51% attacks grow
increasingly harder with the size of blockchain. So you
should run a node consensus is the mechanism that allows a
blockchain to agree upon what the state of the blockchain is
sharding and roll ups are solutions to scalability issues
on layer ones. Layer One is any based blockchain implementation
like Bitcoin or Aetherium. A blockchain scalability problem
is that there's not always enough block space for the
amount of transactions that want to get in them. This leads to
very high gas prices and a Again, gas prices or how much it
costs to interact with the blockchain. So that's it for the blockchain
basics and the blockchain explainers. With just this
information, you now can go off into the world and start working
with blockchains and interacting with blockchains. With at least
some level of knowledge as to what's going on, you should be
incredibly proud of yourself for just making it this far.
Definitely be sure to give yourself a pat on the back and a
round of applause. Now that we've gotten a lot of the basics
and the fundamentals of the way, let's start jumping into the
coding aspect. This is where you're going to learn how to
actually build these smart contracts, how to build these
trust minimized agreements, in these blockchains. And in the
smart contract platforms. This next section, this solidity
basics, the solidity fundamentals section will give
you all the skills to start actually coding solidity and
understanding how these smart contracts work underneath the
hood. So at this point, absolutely, give yourself a high
five, maybe say hi, in the GitHub discussions, maybe say hi
in the community, on Twitter, on Reddit, etc, and be proud of
just making it this far, the journey has really only just
begun, but you've already learned so much. Let's begin the
next section. And let's jump into the code. 